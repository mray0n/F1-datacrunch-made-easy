text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
fancyRpartPlot(modFit$finalModel)
print(modFit$finalModel)
rm(list=ls())
set.seed(125)
inTrain = createDataPartition(segmentationOriginal$Case, p = 3/4)[[1]]
training = segmentationOriginal[inTrain,]
testing = segmentationOriginal[-inTrain,]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
inTrain = createDataPartition(segmentationOriginal$Case, p = 3/4)[[1]]
training = segmentationOriginal[inTrain,]
testing = segmentationOriginal[-inTrain,]
modFit <- train(Case ~ .,method="rpart",data=segmentationOriginal)
library(rattle)
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
rm(list=ls())
data(segmentationOriginal)
training = segmentationOriginal[Case==Train,]
training<-filter(segmentationOriginal,Case=="Train")
training<-subset(segmentationOriginal, Case=="Train")
testing<-subset(segmentationOriginal, Case=="Test")
modFit <- train(Class ~ .,method="rpart",data=training)
print(modFit$finalModel)
library(rattle)
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
dim(olive)
summary(olive)
modFit <- train(Area ~ .,method="rpart",data=olive)
library(caret)
modFit <- train(Area ~ .,method="rpart",data=olive)
?tree
??tree
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata=testing)
predict(modFit,newdata=newdata)
??tree
tr<-tree(Area ~ .,data=olive)
install.packages("tree")
library(tree)
tr<-tree(Area ~ .,data=olive)
predict(tr, newdata=newdata)
predict(modFit,newdata=newdata)
(
newdata = as.data.frame(t(colMeans(olive)))
newdata = as.data.frame(t(colMeans(olive)))
modFit <- train(Area ~ .,method="rpart",data=olive)
predict(modFit,newdata=newdata)
tr<-tree(Area ~ .,data=olive)
predict(tr, newdata=newdata)
rm(list=ls())
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
data(SAheart)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
?SAheatr
?SAheart
logrm<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm", family="binomial")
set.seed(13234)
logrm<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA,logrm)
trainpred<-predit(logrm,newdata=trainSA)
trainpred<-predict(logrm,newdata=trainSA)
testpred<- predict(logrm,newdatra=testSA)
missClass(chd$trainSA,trainpred)
missClass(trainSA$chd,trainpred)
missClassTest<-missClass(testSA$chd,testpred)
missClassTrain<-missClass(trainSA$chd,trainpred)
misclassmat<-cbind(missClassTrain,missClasTest)
misclassmat<-cbind(missClassTrain,missClassTest)
Names(misclassmat)<-c("train","test")
names(misclassmat)<-c("train","test")
misclassmat
missClass(trainSA$chd, predict(logrm, trainSA))
testpred<- predict(logrm,newdata=testSA)
missClassTest<-missClass(testSA$chd,testpred)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
dim(vowel.train)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
ranfor<-train(y~.,method="rf",data=vowel.train)
ranfor$varImp
varranfor<-varImp(ranfor, scale = FALSE)
Varranfor
varranfor
varImp(ranfor)
ranfortest<-train(y~.,method="rf",data=vowel.test)
varranfort<-varImp(ranfortest, scale = FALSE)
varranfort
total<-rbind(vowel.train, vowel.test)
set.seed(33833)
ranfortotal<-train(y~.,method="rf",data=total)
varranfortotal<-varImp(ranfortotal, scale = FALSE)
varranfortotal
varranfor
rm(list=ls())
load("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Machine Learning/project/Coursera_ML_Project/.RData")
rm(list=ls())
load("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Machine Learning/project/Coursera_ML_Project/.RData")
timestamp<-c("raw_timestamp_part_1", "raw_timestamp_part_2" , "cvtd_timestamp", "new_window", "num_window","X" )
traininged<-select(training, -one_of(timestamp))
library(caret)
library(dplyr)
library(randomForest)
library(rpart)
library(klaR)
library(pROC)
library(rattle)
library(plyr)
library(dplyr)
timestamp<-c("raw_timestamp_part_1", "raw_timestamp_part_2" , "cvtd_timestamp", "new_window", "num_window","X" )
traininged<-select(training, -one_of(timestamp))
testinged<-select(testing, -one_of(timestamp))
traininged<-select(training, -one_of(timestamp))
library(dplyr)
traininged<-select(training, -one_of(timestamp))
nasv<-c("max_roll_belt","max_picth_belt","min_roll_belt","min_pitch_belt","amplitude_roll_belt","amplitude_pitch_belt","var_total_accel_belt","avg_roll_belt","stddev_roll_belt","var_roll_belt","avg_pitch_belt","stddev_pitch_belt","var_pitch_belt","avg_yaw_belt","stddev_yaw_belt","var_yaw_belt","var_accel_arm","avg_roll_arm","stddev_roll_arm","var_roll_arm","avg_pitch_arm","stddev_pitch_arm","var_pitch_arm","avg_yaw_arm","stddev_yaw_arm","var_yaw_arm","max_roll_arm","max_picth_arm","max_yaw_arm","min_roll_arm","min_pitch_arm","min_yaw_arm","amplitude_roll_arm","amplitude_pitch_arm","amplitude_yaw_arm","max_roll_dumbbell","max_picth_dumbbell","min_roll_dumbbell","min_pitch_dumbbell","amplitude_roll_dumbbell","amplitude_pitch_dumbbell","var_accel_dumbbell","avg_roll_dumbbell","stddev_roll_dumbbell","var_roll_dumbbell" ,"avg_pitch_dumbbell","stddev_pitch_dumbbell","var_pitch_dumbbell","avg_yaw_dumbbell","stddev_yaw_dumbbell","var_yaw_dumbbell","max_roll_forearm","max_picth_forearm","min_roll_forearm","min_pitch_forearm","amplitude_roll_forearm","amplitude_pitch_forearm","var_accel_forearm","avg_roll_forearm","stddev_roll_forearm","var_roll_forearm","avg_pitch_forearm","stddev_pitch_forearm","var_pitch_forearm","avg_yaw_forearm","stddev_yaw_forearm","var_yaw_forearm")
traininged<-select(traininged,-one_of(nasv))
rm(list=ls())
load("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Machine Learning/project/Coursera_ML_Project/.RData")
library(plyr)
library(dplyr)
library(rattle)
library(pROC)
library(klaR)
library(rpart)
library(randomForest)
library(caret)
timestamp<-c("raw_timestamp_part_1", "raw_timestamp_part_2" , "cvtd_timestamp", "new_window", "num_window","X" )
traininged<-select(training, -one_of(timestamp))
nasv<-c("max_roll_belt","max_picth_belt","min_roll_belt","min_pitch_belt","amplitude_roll_belt","amplitude_pitch_belt","var_total_accel_belt","avg_roll_belt","stddev_roll_belt","var_roll_belt","avg_pitch_belt","stddev_pitch_belt","var_pitch_belt","avg_yaw_belt","stddev_yaw_belt","var_yaw_belt","var_accel_arm","avg_roll_arm","stddev_roll_arm","var_roll_arm","avg_pitch_arm","stddev_pitch_arm","var_pitch_arm","avg_yaw_arm","stddev_yaw_arm","var_yaw_arm","max_roll_arm","max_picth_arm","max_yaw_arm","min_roll_arm","min_pitch_arm","min_yaw_arm","amplitude_roll_arm","amplitude_pitch_arm","amplitude_yaw_arm","max_roll_dumbbell","max_picth_dumbbell","min_roll_dumbbell","min_pitch_dumbbell","amplitude_roll_dumbbell","amplitude_pitch_dumbbell","var_accel_dumbbell","avg_roll_dumbbell","stddev_roll_dumbbell","var_roll_dumbbell" ,"avg_pitch_dumbbell","stddev_pitch_dumbbell","var_pitch_dumbbell","avg_yaw_dumbbell","stddev_yaw_dumbbell","var_yaw_dumbbell","max_roll_forearm","max_picth_forearm","min_roll_forearm","min_pitch_forearm","amplitude_roll_forearm","amplitude_pitch_forearm","var_accel_forearm","avg_roll_forearm","stddev_roll_forearm","var_roll_forearm","avg_pitch_forearm","stddev_pitch_forearm","var_pitch_forearm","avg_yaw_forearm","stddev_yaw_forearm","var_yaw_forearm")
traininged<-select(traininged,-one_of(nasv))
library(dplyr)
traininged<-select(traininged,-one_of(nasv))
pr<-predict(modgbm,testing)
summary(testing)
summary(pr)
rm(list=ls())
load("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Machine Learning/project/Coursera_ML_Project/.RData")
library(caret)
library(dplyr)
library(randomForest)
library(rpart)
library(klaR)
library(pROC)
library(rattle)
timestamp<-c("raw_timestamp_part_1", "raw_timestamp_part_2" , "cvtd_timestamp", "new_window", "num_window","X" )
traininged<-select(training, -one_of(timestamp))
testinged<-select(testing, -one_of(timestamp))
library(dplyr)
testinged<-select(testing, -one_of(timestamp))
rm(list=ls())
load("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Machine Learning/project/Coursera_ML_Project/.RData")
library(dplyr)
timestamp<-c("raw_timestamp_part_1", "raw_timestamp_part_2" , "cvtd_timestamp", "new_window", "num_window","X" )
traininged<-select(training, -one_of(timestamp))
testinged<-select(testing, -one_of(timestamp))
nasv<-c("max_roll_belt","max_picth_belt","min_roll_belt","min_pitch_belt","amplitude_roll_belt","amplitude_pitch_belt","var_total_accel_belt","avg_roll_belt","stddev_roll_belt","var_roll_belt","avg_pitch_belt","stddev_pitch_belt","var_pitch_belt","avg_yaw_belt","stddev_yaw_belt","var_yaw_belt","var_accel_arm","avg_roll_arm","stddev_roll_arm","var_roll_arm","avg_pitch_arm","stddev_pitch_arm","var_pitch_arm","avg_yaw_arm","stddev_yaw_arm","var_yaw_arm","max_roll_arm","max_picth_arm","max_yaw_arm","min_roll_arm","min_pitch_arm","min_yaw_arm","amplitude_roll_arm","amplitude_pitch_arm","amplitude_yaw_arm","max_roll_dumbbell","max_picth_dumbbell","min_roll_dumbbell","min_pitch_dumbbell","amplitude_roll_dumbbell","amplitude_pitch_dumbbell","var_accel_dumbbell","avg_roll_dumbbell","stddev_roll_dumbbell","var_roll_dumbbell" ,"avg_pitch_dumbbell","stddev_pitch_dumbbell","var_pitch_dumbbell","avg_yaw_dumbbell","stddev_yaw_dumbbell","var_yaw_dumbbell","max_roll_forearm","max_picth_forearm","min_roll_forearm","min_pitch_forearm","amplitude_roll_forearm","amplitude_pitch_forearm","var_accel_forearm","avg_roll_forearm","stddev_roll_forearm","var_roll_forearm","avg_pitch_forearm","stddev_pitch_forearm","var_pitch_forearm","avg_yaw_forearm","stddev_yaw_forearm","var_yaw_forearm")
traininged<-select(traininged,-one_of(nasv))
rm(list=ls())
load("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Machine Learning/project/Coursera_ML_Project/.RData")
library(dplyr)
timestamp<-c("raw_timestamp_part_1", "raw_timestamp_part_2" , "cvtd_timestamp", "new_window", "num_window","X" )
traininged<-select(training, -one_of(timestamp))
testinged<-select(testing, -one_of(timestamp))
nasv<-c("max_roll_belt","max_picth_belt","min_roll_belt","min_pitch_belt","amplitude_roll_belt","amplitude_pitch_belt","var_total_accel_belt","avg_roll_belt","stddev_roll_belt","var_roll_belt","avg_pitch_belt","stddev_pitch_belt","var_pitch_belt","avg_yaw_belt","stddev_yaw_belt","var_yaw_belt","var_accel_arm","avg_roll_arm","stddev_roll_arm","var_roll_arm","avg_pitch_arm","stddev_pitch_arm","var_pitch_arm","avg_yaw_arm","stddev_yaw_arm","var_yaw_arm","max_roll_arm","max_picth_arm","max_yaw_arm","min_roll_arm","min_pitch_arm","min_yaw_arm","amplitude_roll_arm","amplitude_pitch_arm","amplitude_yaw_arm","max_roll_dumbbell","max_picth_dumbbell","min_roll_dumbbell","min_pitch_dumbbell","amplitude_roll_dumbbell","amplitude_pitch_dumbbell","var_accel_dumbbell","avg_roll_dumbbell","stddev_roll_dumbbell","var_roll_dumbbell" ,"avg_pitch_dumbbell","stddev_pitch_dumbbell","var_pitch_dumbbell","avg_yaw_dumbbell","stddev_yaw_dumbbell","var_yaw_dumbbell","max_roll_forearm","max_picth_forearm","min_roll_forearm","min_pitch_forearm","amplitude_roll_forearm","amplitude_pitch_forearm","var_accel_forearm","avg_roll_forearm","stddev_roll_forearm","var_roll_forearm","avg_pitch_forearm","stddev_pitch_forearm","var_pitch_forearm","avg_yaw_forearm","stddev_yaw_forearm","var_yaw_forearm")
traininged<-select(traininged,-one_of(nasv))
rm(train,triningNA,modgbm,modrf,modrpart,naives)
rm(trainingNA)
library(caret)
library(rpart)
library(rattle)
modrpart1<-train(classe~.,data=traininged, method="rpart")
modrf<-train(classe~.,data=traininged, method="rf",prox=TRUE)
naives<-train(classe~.,data=traininged, method="nb")
help()
install.packages(c("ggplot2", "gridExtra", "Hmisc", "latticeExtra", "lme4", "manipulate", "pbkrtest", "quantreg", "RcppEigen", "tidyr"))
install.packages(c("boot", "Matrix", "mgcv", "nlme", "nnet"), lib="C:/Program Files/R/R-3.2.3/library")
library(trees)
install.packages("trees")
library(ISLR)
install.packages("ISLR")
library(rpart)
library(tree)
library(ISLR)
attach(carsets)
attach(Carseats)
High<-ifelse(sales<=8,"No","Yes")
High<-ifelse(Sales<=8,"No","Yes")
Carseats=data.frame(Carseats,High)
Tree.carseats<-tree(High~.,Carseats)
summary(Tree.carseats)
Tree.carseats<-tree(High~.-Sales,Carseats)
summaru(Tree.carseats)
summary(Tree.carseats)
library(rattle)
fancyRpartPlot(Tree.carseats$finalModel)
plot(Tree.carseats)
dev.off()
plot(Tree.carseats)
par(mfcol=c(12,12), oma=c(1,1,0,0), mar=c(1,1,1,0), tcl=-0.1, mgp=c(0,0,0))
plot(datalistB,type="l")
for(i in seq_along(loop.vec))
{
plot( subsignals[[i]],type="l")
}
par(mai=1)
par(mai=0)
par(mar = rep(2, 4))
plot(Tree.carseats)
par(mar=c(1,1,1,1))
plot(Tree.carseats)
par("mar")
plot(Tree.carseats)
par(mar=c(0.1,0.1,0.1,0.1))
plot(Tree.carseats)
par(mar=c(0.01,0.01,0.01,0.01))
plot(Tree.carseats)
dev.off()
plot(Tree.carseats)
text(tree.carseats ,pretty =0)
text(Tree.carseats ,pretty =0)
plot(Tree.carseats,cex=0.5)
text(Tree.carseats ,pretty =0)
plot(Tree.carseats,cex=0.5)
text(Tree.carseats ,, cex=0.5, pretty =0)
Tree.carseats
set.seed(2)
train=sample(1:nrow(Carseats), 200)
Carseats.test=Carseats[-train,]
High.test=High[-train]
tree.carseats=tree(High~.-Sales,Carseats,subset=train)
tree.pred=predict(tree.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
(86+57)/200
set.seed(3)
cv.carseats=cv.tree(tree.carseats,FUN=prune.misclass)
names(cv.carseats)
cv.carseats
par(mfrow=c(1,2))
plot(cv.carseats$size,cv.carseats$dev,type="b")
plot(cv.carseats$k,cv.carseats$dev,type="b")
prune.carseats=prune.misclass(Tree.carseats,best=9)
plot(prune.carseats)
text(prune.carseats,pretty=0)
text(prune.carseats,pretty=0,cex=0.7)
plot(prune.carseats)
text(prune.carseats,pretty=0,cex=0.7)
tree.pred=predict(prune.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
(94+60)/200
(101+74)/200
library(randomForest)
load("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Machine Learning/project/Coursera_ML_Project/project.RData")
load("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Machine Learning/project/Coursera_ML_Project/project.RData")
library(caret)
library(ggplot2)
library(plyr)
library(dplyr)
library(randomForest)
library(rpart)
library(klaR)
library(pROC)
library(rattle)
library(tree)
modtree<-tree(classe~.,data=traininged)
summary(modtree)
plot(modtree)
text(modtree,pretty=0, cex=0,5)
plot(modtree)
text(modtree,pretty=0, cex=0,3)
ptree<-predict(modtree,testing,type="class")
acctree<-table(ptree,real)
acctree
(906+403+508+466+371)/3923
acclda
(957+477+460+481+482)/3923
accprf
(1115+754+681+626+717)/3923
accprpart
(1020+256+346+311)/3923
accnaives
(1006+487+433+388+554)/3923
save.image("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Machine Learning/project/Coursera_ML_Project/project.RData")
cvmodtree<-cv.tree(modtree,FUN=prune.misclass)
cvmodtree
par(mfrow =c(1,2))
plot(cvmodtree$size ,cvmodtree$dev ,type="b")
plot(cvmodtree$k ,cvmodtree$dev ,type="b")
cvmodtree<-cv.tree(modtree,FUN=prune.misclass, K=17:25)
cvmodtree
cvmodtree<-cv.tree(modtree,FUN=prune.misclass, K=17)
cvmodtree
cvmodtree<-cv.tree(modtree,FUN=prune.misclass, K=17,20)
cvmodtree<-cv.tree(modtree,FUN=prune.misclass, K=(17,20))
cvmodtree<-cv.tree(modtree,FUN=prune.misclass, K=(17:20))
cvmodtree
cvmodtree<-cv.tree(modtree,FUN=prune.misclass, K=50)
cvmodtree
modprunetree18<-prune.misclass(modtree,best=18)
modprunetree19<-prune.misclass(modtree,best=19)
pprunetree18<-predict(modprunetree18,testing,type="class")
pprunetree19<-predict(modprunetree19,testing,type="class")
accmodprune18<-table(pprunetree18,real)
accmodprune19<-table(pprunetree19,real)
accmodprunetree18
accmodprune18
(906+403+508+466+371)/3923
accmodprune19
acctree
modprunetree9<-prune.misclass(modtree,best=9)
pprunetree9<-predict(modprunetree9,testing,type="class")
accmodprune9<-table(pprunetree9,real)
accmodprune
Accmodprune9
accmodprune9
(820+402+508+397+311)/3923
modprunetree14<-prune.misclass(modtree,best=14)
pprunetree14<-predict(modprunetree14,testing,type="class")
accmodprune9<-table(pprunetree9,real)
accmodprune14
accmodprune14<-table(pprunetree14,real)
accmodprune14
(820+363+508+466+371)/3923
modprunetree25<-prune.misclass(modtree,best=25)
summary(modtree)
library(randomForest)
modbag<-randomForest(classe~.,data=traininged,mtry=52, importance=TRUE)
modbag
pbag<-predict(modbag,testing)
accmodbag<-table(pbag,real)
accmodbag
(113+745+679+629+710)/3923
(1113+745+679+629+710)/3923
diag(accmodbag)
sum(diag(modbag))
zz<-diag(accmodbag)
sum(zz)
sum(modbag)
sum(accmodbag)
save.image("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Machine Learning/project/Coursera_ML_Project/project.RData")
source('~/.active-rstudio-document')
Accuracy<-function (x){
a<-diag(x)
diaga<-sum(a)
b<-sum(x)
diaga/b
}
Accuracy(accmodbag)
source('D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Accuracy.R')
sq(52)
sqrt(52)
modrandomf<-randomForest(classe~.,traininged,mtry=7, importance=TRUE)
prandomf<-predict(modrandomf,testing)
accmodrandomf<-table(prandomf,real)
Accuracy(accmodrandomf)
modrandomf<-randomForest(classe~.,traininged,mtry=5, importance=TRUE)
modrandomf2<-randomForest(classe~.,traininged,mtry=5, importance=TRUE)
modrandomf<-randomForest(classe~.,traininged,mtry=7, importance=TRUE)
prandomf2<-predict(modrandomf2,testing)
accmodrandomf2<-table(prandomf2,real)
Accuracy(accmodrandomf2)
save.image("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Machine Learning/project/Coursera_ML_Project/project.RData")
load("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Machine Learning/project/Coursera_ML_Project/project.RData")
library(caret)
library(ggplot2)
library(plyr)
library(dplyr)
library(randomForest)
library(rpart)
library(klaR)
library(pROC)
library(rattle)
library(tree)
modrandomf3<-randomForest(classe~.,traininged,mtry=10, importance=TRUE)
library(gbm)
prandomf3<-predict(modrandomf3,testing)
accmodrandomf3<-table(prandomf3,real)
Accuracy(prandomf3)
Accuracy(accprandomf3)
Accuracy(accmodrandomf3)
Accuracy (accmodrandomf)
modrandomf4<-randomForest(classe~.,traininged, importance=TRUE)
prandomf4<-predict(modrandomf4,testing)
accmodrandomf4<-table(prandomf4,real)
Acuracy(accmodrandomf4)
Accuracy(accmodrandomf4)
Accuracy(accmodrandomf2)
importance(modrandomf)
Accuracy(accprf)
importance(modrf)
summary(modrf)
modrf
varImpPlot(modrandomf)
par(mfrow=c(2,2))
varImpPlot(modrandomf)
varImpPlot(modrandomf2)
varImp(modrf)
set.seed(1)
save.image("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Machine Learning/project/Coursera_ML_Project/project.RData")
modrandomf
modgbm<-gbm(classe~.,data=traininged,distribution="multinomial",n.trees=500,interaction.depth=4)
pgbm<-predict(modgbm,testing)
pgbm<-predict(modgbm,testing,n.trees=500)
accmodgbm<-table(pgbm,real)
pgbm1<-predict(modgbm,testing,single.tree=TRUE)
pgbm1<-predict(modgbm,testing,n.trees=500, single.tree=TRUE)
pgbm<-predict(modgbm,testing,n.trees=500,type="response")
pgbm<-predict(modgbm,testing,n.trees=500,type="link")
pgbm<-predict(modgbm,testing,n.trees=500)
pgbm<-predict(modgbm,testing,n.trees=500,type="link",distribution="multinomial")
save.image("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Machine Learning/project/Coursera_ML_Project/project.RData")
load("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Machine Learning/project/Coursera_ML_Project/project.RData")
head (pgbm)
pgbm<-predict(modgbm,testing,n.trees=500)
library(caret)
library(ggplot2)
library(plyr)
library(dplyr)
library(randomForest)
library(rpart)
library(klaR)
library(pROC)
library(rattle)
library(tree)
library(gbm)
pgbm<-predict(modgbm,testing,n.trees=500)
head (pgbm)
predict(modgbm, testing, type="class")
pgbm<-predict(modgbm, testing, ,n.trees=500, type="class")
pgbm<-predict(modgbm, testing, ,n.trees=500, type="link")
pgbm<-predict(modgbm, testing, ,n.trees=500, type="response")
summary(modgbm)
dev.off()
summary(modgbm)
summary(modgbm)
save.image("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/Machine Learning/project/Coursera_ML_Project/project.RData")
install.packages("shiny")
installpackages("Rtools")
installpackages("Rtools")
install.packages("Rtools")
install.packages("installr")
library(installr)
if(!require("installr")) install.packages('installr')
library("installr")
updateR() # this will open dialog boxes to take you through the steps.
load("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/DDP/Assignment/DDPProject.R.RData")
setwd("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/DDP/Assignment")
runApp('D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/DDP/Assignment/F1',display.mode="showcase")
library(shiny)
library(ggplot2)
runApp('D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/DDP/Assignment/F1',display.mode="showcase")
runApp('D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/DDP/Assignment/F1DataCrunch',display.mode="showcase")
runApp('D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/DDP/Assignment/F1-datacrunch-made-easy',display.mode="showcase")
slidify("index.Rmd")
library(slidify)
getwd
getwd()
setwd("D:/Datos Miguel Rayon/Casa/Documents/Curso Data Science J Hopkins/DDP/Assignment/F1-datacrunch-made-easy")
getwd
getwd()
author("F1DataPresentation") # name of the presentacion
ls()
getwd()
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish(user = "mray0n", repo = "Fq")
publish(user = "mray0n", repo = "F1-Presentation")
publish(user = "mray0n", repo = "F1-Presentation.github.io")
publish(user = "mray0n", repo = "F1-Presentation")
publish(user = "mray0n", repo = "F1-Presentation")
